#!/usr/bin/env python
import argparse
import json
import os
import re
import requests
import subprocess
from tld import get_fld

EXTERNAL_IP_QUERY_API = 'https://api.ipify.org/?format=json'
CLOUDFLARE_ZONE_QUERY_API = 'https://api.cloudflare.com/client/v4/zones?per_page=50'  # GET
CLOUDFLARE_ZONE_DNS_RECORDS_QUERY_API = 'https://api.cloudflare.com/client/v4/zones/{zone_id}/dns_records'  # GET
CLOUDFLARE_ZONE_DNS_RECORDS_UPDATE_API = 'https://api.cloudflare.com/client/v4/zones/{zone_id}/dns_records/{dns_record_id}'  # PUT

# Backwards compatible with Python 2
try:
    input = raw_input
except NameError:
    pass

def load_configuration():
    config = {}
    config['domains'] = os.getenv('DOMAIN_NAMES').split(',')
    config['email'] = os.getenv('ACCOUNT_EMAIL')
    config['api_key'] = os.getenv('API_KEY')
    if all([key in config for key in ['domains', 'email', 'api_key']]):
        return config
    else:
        print('Configuration file {config_file} is missing at least one of the following config parameters: domains, email, or api_key'.format(config_file=CONFIGURATION_FILE))
        return {}

def get_external_ip():
    """
    Get the external IP of the network the script where the script is being executed.

    :return: A string representing the network's external IP address
    """
    return requests.get(EXTERNAL_IP_QUERY_API, timeout=6).json()['ip']


def update_dns_record(auth, zone_id, record, ip_address):
    if record is None or ip_address is None:
        return
    print('Updating the {type} record (ID {dns_record_id}) of (sub)domain {subdomain} (ID {zone_id}) to {ip_address}.'.format(type=record['type'], dns_record_id=record['id'], zone_id=zone_id, subdomain=record['name'], ip_address=ip_address))
    if record['content'] == ip_address:
        print('DNS record is already up-to-date; taking no action')
        return
    update_resp = requests.put(
        CLOUDFLARE_ZONE_DNS_RECORDS_UPDATE_API.format(zone_id=zone_id, dns_record_id=record['id']),
        headers=dict(list(auth.items()) + [('Content-Type', 'application/json')]),
        data=json.dumps({'type': record['type'], 'name': record['name'], 'content': ip_address}),
        timeout=6,
    )
    if update_resp.json()['success']:
        print('DNS record updated successfully!')
    else:
        print('DNS record failed to update.\nCloudFlare returned the following errors: {errors}.\nCloudFlare returned the following messages: {messages}'.format(errors=update_resp.json()['errors'], messages=update_resp.json()['messages']))


def update_dns(subdomain, auth, ipv4_address):
    """
    Updates the specified domain with the given IP address, given authentication parameters.

    :param domain: String representing domain to update
    :param auth: Dictionary of API authentication credentials
    :param ipv4_address: IPv4 address with which to update the A record
    :param ipv6_address: IPv6 address with which to update the AAAA record
    :return: None
    """
    # Extract the domain
    domain = get_fld(subdomain, fix_protocol=True)
    # Find the zone ID corresponding to the domain
    zone_resp = requests.get(CLOUDFLARE_ZONE_QUERY_API, headers=auth, timeout=6)
    if zone_resp.status_code != 200:
        print('Authentication error: make sure your email and API key are correct. To set new values, run cloudflare-ddns --configure')
        return
    zone_names_to_ids = {zone['name']: zone['id'] for zone in zone_resp.json()['result']}
    if domain not in zone_names_to_ids:
        print('The domain {domain} doesn\'t appear to be one of your CloudFlare domains. We only found {domain_list}.'.format(domain=domain, domain_list=map(str, zone_names_to_ids.keys())))
        return
    zone_id = zone_names_to_ids[domain]

    # Find DNS records
    record_a = None
    record_aaaa = None
    for dns_record in requests.get(
            CLOUDFLARE_ZONE_DNS_RECORDS_QUERY_API.format(zone_id=zone_id),
            headers=auth,
            params={'name': subdomain},
            timeout=6,
    ).json()['result']:
        if dns_record['type'] == 'A':
            record_a = dns_record
        elif dns_record['type'] == 'AAAA':
            record_aaaa = dns_record

    # Update the record as necessary
    update_dns_record(auth, zone_id, record_a, ipv4_address)


def main():
    """
    Main program: either make the configuration file or update the DNS
    """
    config = load_configuration()
    if not config:
        return
    auth = {'X-Auth-Email': config['email'], 'X-Auth-Key': config['api_key']}
    external_ip = get_external_ip()
    for domain in config['domains']:
        update_dns(domain, auth, external_ip)


if __name__ == '__main__':
    main()
